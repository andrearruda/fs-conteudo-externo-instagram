<?php
namespace App\Action;

use Slim\Http\Request,
    Slim\Http\Response;

use Larabros\Elogram\Client;
use League\OAuth2\Client\Token\AccessToken;

use FileSystemCache;

final class InstagramAction
{
    private $instagram;
    private $paths;
    private $user_id;
    private $length = 5;

    public function __construct($config, $paths)
    {
        $this->instagram = new Client($config['apiKey'], $config['apiSecret'], null, $config['apiCallback']);
        $this->paths = $paths;
    }

    public function __invoke(Request $request, Response $response, $args)
    {
    }

    public function posts(Request $request, Response $response, $args)
    {
        $this->setUserId($args['user-id']);

        if(isset($args['amount']))
        {
            $this->setLength($args['amount']);
        }

        $forceFileCached = isset($request->getQueryParams()['forceFileCached']) ? $request->getQueryParams()['forceFileCached'] : false;

        FileSystemCache::$cacheDir = __DIR__ . '/../../../cache/tmp';
        $key = FileSystemCache::generateCacheKey($args['user-id']);
        $data = FileSystemCache::retrieve($key);

        if($data === false || $forceFileCached == true)
        {
            $instagram_token_path = __DIR__ . '/../../../data/tokens/instagram.tk';
            $data = json_decode(file_get_contents($instagram_token_path), true);
            $token = new AccessToken($data);

            $client = $this->getInstagram();
            $client->setAccessToken($token);


            echo '<pre>' . PHP_EOL;
            $response = $client->users()->getLikedMedia();
            echo json_encode($response->get());

            $response = $client->users()->follows();
            echo json_encode($response->get());

            $response = $client->users()->get();
            echo json_encode($response->get());

            echo '</pre>' . PHP_EOL;
        }
    }

    public function login(Request $request, Response $response, $args)
    {
        $loginUrl = $this->getInstagram()->getLoginUrl(array(
            'scope' => 'basic public_content follower_list comments relationships likes'
        ));

        echo '<a href="' . $loginUrl . '">Login with Instagram</a>';
    }

    public function callback(Request $request, Response $response, $args)
    {
        $code = $request->getQueryParams()['code'];

        /** @var $token \League\OAuth2\Client\Token\AccessToken*/
        $token = $this->getInstagram()->getAccessToken($code);

        $instagram_token_path = __DIR__ . '/../../../data/tokens/instagram.tk';
        file_put_contents($instagram_token_path, json_encode($token->jsonSerialize()));

        echo '<pre>' . PHP_EOL;
        print_r($token->jsonSerialize());
        echo '</pre>' . PHP_EOL;
    }

    public function infoAccessToken()
    {
        $instagram_token_path = __DIR__ . '/../../../data/tokens/instagram.tk';
        $accessToken = json_decode(file_get_contents($instagram_token_path), true);

        echo '<pre>' . PHP_EOL;
        print_r($accessToken);
        echo '</pre>' . PHP_EOL;
    }

    /** @return \Larabros\Elogram\Client */
    private function getInstagram()
    {
        return $this->instagram;
    }

    /**
     * @return mixed
     */
    private function getPaths()
    {
        return $this->paths;
    }

    /**
     * @return mixed
     */
    private function getUserId()
    {
        return $this->user_id;
    }

    /**
     * @param mixed $user_id
     */
    private function setUserId($user_id)
    {
        $this->user_id = $user_id;
    }

    /**
     * @return int
     */
    private function getLength()
    {
        return $this->length;
    }

    /**
     * @param int $length
     */
    private function setLength($length)
    {
        $this->length = $length;
    }
}
